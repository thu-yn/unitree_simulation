<?xml version="1.0"?>
<!--
  文件名: package.xml
  功能描述: unitree_controller ROS包的元数据和依赖声明文件
  
  主要作用:
  -1. 定义ROS包的基本信息(名称、版本、描述、维护者等)
  0. 声明编译和运行时依赖的其他ROS包
  1. 配置包的导出信息和插件路径
  2. 为catkin构建系统提供必要的元数据
  
  在整个项目中的作用:
  - 🔴 核心配置文件 - catkin构建系统的重要输入
  - 依赖管理 - 确保所需的ROS包被正确安装和链接
  - 包信息展示 - 在ROS生态系统中标识和描述此包
  
  重要性:
  - 没有正确的package.xml文件，ROS包无法被catkin正确识别和构建
  - 依赖声明错误会导致编译失败或运行时错误
  - 是ROS包分发和共享的标准格式
-->
<!-- 
  ROS包清单文件
  格式版本: 2 (支持条件依赖和更丰富的元数据)
-->
<package format="2">
    
    <!-- ==================== 基本包信息 ==================== -->
    
    <!--
      包名称: unitree_controller
      
      作用: 定义此ROS包的唯一标识符
      重要性: 
      - 用于catkin工作空间中的包识别
      - 其他包通过此名称引用本包
      - 必须与文件夹名称一致
    -->
    <name>unitree_controller</name>
    
    <!--
      版本号: 0.0.0
      
      格式: major.minor.patch (语义化版本控制)
      当前状态: 开发版本，尚未正式发布
      
      版本含义:
      - major: 主版本号，不兼容的API变更时递增
      - minor: 次版本号，向后兼容的功能增加时递增  
      - patch: 修订号，向后兼容的bug修复时递增
    -->
    <version>0.0.0</version>
    
    <!--
      包描述: 简要说明包的功能
      
      作用: 为用户和开发者提供包功能的概览
      内容: 说明这是Unitree机器人的控制器包
    -->
    <description>The unitree_controller package.</description>

    <!-- ==================== 维护者信息 ==================== -->
    
    <!--
      维护者信息
      
      email: 维护者的联系邮箱
      作用: 提供技术支持和bug报告的联系方式
      重要性: 帮助用户在遇到问题时找到相应的技术支持
    -->
    <maintainer email="laikago@unitree.cc">unitree</maintainer>
    
    <!--
      许可证信息
      
      当前状态: TODO (待定)
      建议: 应该明确指定开源许可证，如MIT、Apache-2.0、GPL等
      重要性: 明确代码的使用和分发条款
    -->
    <license>TODO</license>

    <!-- ==================== 构建工具依赖 ==================== -->
    
    <!--
      catkin: ROS的官方构建系统
      
      作用: 
      - 提供CMake的扩展和宏
      - 处理ROS包之间的依赖关系
      - 生成必要的配置文件
      
      依赖类型: buildtool_depend (构建工具依赖)
      必要性: 所有ROS包都需要此依赖
    -->
    <buildtool_depend>catkin</buildtool_depend>
    
    <!--
      genmsg: ROS消息生成工具
      
      作用: 处理自定义消息类型的生成
      虽然本包主要使用现有消息类型，但仍声明此依赖以确保兼容性
    -->
    <buildtool_depend>genmsg</buildtool_depend>

    <!-- ==================== 编译时依赖 ==================== -->
    
    <!--
      controller_manager: ROS控制器管理器
      
      作用: 
      - 提供控制器的加载、启动、停止等管理功能
      - 为Gazebo仿真中的关节控制器提供框架支持
      
      在本包中的用途: 管理机器人关节控制器的生命周期
    -->
    <build_depend>controller_manager</build_depend>
    
    <!--
      joint_state_controller: 关节状态控制器
      
      作用:
      - 发布机器人所有关节的状态信息
      - 为robot_state_publisher提供关节数据
      
      在本包中的用途: 获取和发布12个关节的位置、速度、力矩信息
    -->
    <build_depend>joint_state_controller</build_depend>
    
    <!--
      robot_state_publisher: 机器人状态发布器
      
      作用:
      - 基于URDF模型和关节状态计算并发布TF变换
      - 为rviz等可视化工具提供机器人模型信息
      
      在本包中的用途: 发布机器人各部件之间的坐标变换关系
    -->
    <build_depend>robot_state_publisher</build_depend>
    
    <!--
      roscpp: ROS的C++客户端库
      
      作用:
      - 提供C++版本的ROS API
      - 包含节点、发布器、订阅器、服务等核心功能
      
      在本包中的用途: 本包的所有C++代码都依赖此库
      重要性: 🔴 核心依赖，所有C++节点必需
    -->
    <build_depend>roscpp</build_depend>
    
    <!--
      std_msgs: ROS标准消息类型
      
      作用: 提供基础消息类型如Bool, Int32, Float64, String等
      在本包中的用途: 使用Bool消息进行状态标识
    -->
    <build_depend>std_msgs</build_depend>

    <!-- ==================== 导出依赖 ==================== -->
    <!-- 
      build_export_depend: 其他包依赖本包时需要的编译依赖
      这些依赖会传递给依赖本包的其他包
    -->
    <build_export_depend>controller_manager</build_export_depend>
    <build_export_depend>joint_state_controller</build_export_depend>
    <build_export_depend>robot_state_publisher</build_export_depend>
    <build_export_depend>roscpp</build_export_depend>
    <build_export_depend>std_msgs</build_export_depend>

    <!-- ==================== 运行时依赖 ==================== -->
    <!--
      exec_depend: 运行时依赖
      这些包在运行本包的节点时必须存在
    -->
    <exec_depend>controller_manager</exec_depend>
    <exec_depend>joint_state_controller</exec_depend>
    <exec_depend>robot_state_publisher</exec_depend>
    <exec_depend>roscpp</exec_depend>
    <exec_depend>std_msgs</exec_depend>
    
    <!--
      unitree_legged_msgs: Unitree腿式机器人消息包
      
      作用: 
      - 🔴 核心依赖 - 定义机器人专用的消息类型
      - 包含MotorCmd, MotorState, LowCmd, LowState等关键消息
      
      依赖类型: depend (编译和运行时都需要)
      重要性: 
      - 本包的核心功能完全依赖这些消息类型
      - 如果此包不可用，unitree_controller无法正常工作
      
      消息类型:
      - MotorCmd: 单个电机控制命令
      - MotorState: 单个电机状态反馈  
      - LowCmd: 底层控制命令(包含12个关节)
      - LowState: 底层状态反馈(包含12个关节+IMU+足端力)
      - HighCmd/HighState: 高层控制命令和状态
      - IMU: 惯性测量单元数据
      - BmsCmd/BmsState: 电池管理系统
    -->
    <depend>unitree_legged_msgs</depend>

    <!-- ==================== 导出配置 ==================== -->
    
    <!--
      export标签: 包的导出配置
      
      作用: 声明本包提供的额外功能和资源
      当前状态: 已注释，表示暂时不导出特殊配置
      
      如果启用，可能包含:
      - gazebo_ros插件路径
      - rviz插件
      - nodelets等
    -->
    <export>
        <!-- 
          其他工具可以在这里请求放置额外信息
          
          gazebo_ros配置示例:
          定义Gazebo插件的搜索路径和媒体文件路径
          
          <gazebo_ros plugin_path="${prefix}/lib" gazebo_media_path="${prefix}"/>
          
          说明:
          - plugin_path: Gazebo插件库文件的搜索路径
          - gazebo_media_path: Gazebo媒体文件(模型、材质等)的路径
          - ${prefix}: 指向包的安装路径
          
          当前状态: 已注释，因为unitree_controller不直接提供Gazebo插件
          实际的Gazebo插件在unitree_gazebo包中实现
        -->
        <!-- <gazebo_ros plugin_path="${prefix}/lib" gazebo_media_path="${prefix}"/> -->
    </export>
    
</package>