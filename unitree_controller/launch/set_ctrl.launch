<!--
  文件名: set_ctrl.launch
  功能描述: unitree_controller包的控制器参数设置启动文件
  
  主要作用:
  1. 设置机器人名称参数，支持多种机器人型号
  2. 为整个系统提供统一的机器人标识配置
  3. 被其他launch文件引用，实现参数化启动
  4. 可选择性启动unitree_servo节点
  
  在整个项目中的作用:
  - 🟡 配置文件 - 为系统提供机器人型号参数
  - 被gazebo_move_base.launch等上层启动文件引用
  - 支持go1, a1, laikago, aliengo等多种机器人型号
  - 实现一套代码支持多种机器人的灵活配置
  
  使用场景:
  - 通常不直接启动，而是被其他launch文件包含
  - 提供机器人名称的统一配置入口
  - 支持运行时参数传递和覆盖
  
  参数传递示例:
  <include file="$(find unitree_controller)/launch/set_ctrl.launch">
      <arg name="rname" value="go1"/>
  </include>
-->

<launch>
    
    <!-- ==================== 参数定义和设置 ==================== -->
    
    <!--
      机器人名称参数声明
      
      参数名: rname (robot name的缩写)
      默认值: laikago
      数据类型: 字符串
      
      支持的机器人型号:
      - laikago: Unitree早期四足机器人型号
      - a1: Unitree A1机器人
      - go1: Unitree Go1机器人  
      - aliengo: Unitree Aliengo机器人
      - go2: Unitree Go2机器人(较新型号)
      
      作用:
      - 为整个系统提供机器人型号标识
      - 用于加载对应的URDF模型和配置文件
      - 影响话题命名和Gazebo模型名称
      
      命名约定:
      - 在Gazebo中机器人模型名为: {rname}_gazebo
      - 相关话题前缀为: /{rname}_gazebo/
      - URDF描述包名为: {rname}_description
    -->
    <arg name="rname" default="laikago"/>
    
    <!--
      设置全局ROS参数
      
      参数路径: /robot_name
      参数值: $(arg rname) - 引用上面定义的rname参数
      作用域: 全局 (所有节点都可以访问)
      
      重要性:
      - 🔴 核心参数 - 整个系统的机器人型号标识
      - 被unitree_controller包中的所有程序读取
      - 影响话题命名、模型加载、配置文件选择等
      
      使用方式:
      - C++中通过 ros::param::get("/robot_name", robot_name) 获取
      - Python中通过 rospy.get_param("/robot_name") 获取
      - 命令行通过 rosparam get /robot_name 查看
      
      参数传播:
      - 此参数设置后，所有相关节点都使用统一的机器人名称
      - 确保话题命名的一致性和系统的协调性
    -->
    <param name="robot_name" value="$(arg rname)"/>

    <!-- ==================== 可选节点启动 ==================== -->
    
    <!--
      unitree_servo节点启动 (当前已注释)
      
      包名: unitree_controller
      节点类型: unitree_servo (对应src/servo.cpp编译的可执行文件)
      节点名称: unitree_servo
      重启策略: respawn="true" (节点崩溃时自动重启)
      
      功能说明:
      - 这是机器人的主控制节点
      - 负责让机器人从平躺状态站立起来
      - 实现关节控制和状态监控
      - 连接Gazebo仿真与ROS控制系统
      
      注释原因:
      - 通常希望手动启动控制节点，而不是自动启动
      - 便于调试和测试，可以按需启动
      - 避免在系统启动时就开始控制机器人
      
      如果需要自动启动，可以取消注释:
      <node pkg="unitree_controller" type="unitree_servo" name="unitree_servo" respawn="true"/>
      
      手动启动方式:
      rosrun unitree_controller unitree_servo
      
      启动时机:
      1. 先启动Gazebo仿真环境
      2. 加载机器人模型和控制器
      3. 最后启动unitree_servo让机器人站立
    -->
    <!-- <node pkg="unitree_controller" type="unitree_servo" name="unitree_servo" respawn="true"/> -->

</launch>