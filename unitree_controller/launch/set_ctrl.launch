<!--
  文件名: set_ctrl.launch
  功能描述: unitree_controller包的控制器参数设置启动文件
  
  主要作用:
  1. 设置机器人名称参数，支持多种机器人型号
  2. 为整个系统提供统一的机器人标识配置
  3. 被其他launch文件引用，实现参数化启动
  4. 可选择性启动unitree_servo节点
  
  在整个项目中的作用:
  - 🟡 配置文件 - 为系统提供机器人型号参数
  - 被gazebo_move_base.launch等上层启动文件引用
  - 支持go1, a1, laikago, aliengo等多种机器人型号
  - 实现一套代码支持多种机器人的灵活配置
  
  使用场景:
  - 通常不直接启动，而是被其他launch文件包含
  - 提供机器人名称的统一配置入口
  - 支持运行时参数传递和覆盖
  
  参数传递示例:
  <include file="$(find unitree_controller)/launch/set_ctrl.launch">
      <arg name="rname" value="go1"/>
  </include>
-->

<launch>
    
    <!-- ==================== 参数定义和设置 ==================== -->
    
    <!--
      机器人名称参数声明
      
      参数名: rname (robot name的缩写)
      默认值: laikago
      数据类型: 字符串
      
      支持的机器人型号:
      - laikago: Unitree早期四足机器人型号
      - a1: Unitree A1机器人
      - go1: Unitree Go1机器人  
      - aliengo: Unitree Aliengo机器人
      - go2: Unitree Go2机器人(较新型号)
      
      作用:
      - 为整个系统提供机器人型号标识
      - 用于加载对应的URDF模型和配置文件
      - 影响话题命名和Gazebo模型名称
      
      命名约定:
      - 在Gazebo中机器人模型名为: {rname}_gazebo
      - 相关话题前缀为: /{rname}_gazebo/
      - URDF描述包名为: {rname}_description
    -->
    <arg name="rname" default="laikago"/>
    
    <!--
      设置全局ROS参数
      
      参数路径: /robot_name
      参数值: $(arg rname) - 引用上面定义的rname参数
      作用域: 全局 (所有节点都可以访问)
      
      重要性:
      - 🔴 核心参数 - 整个系统的机器人型号标识
      - 被unitree_controller包中的所有程序读取
      - 影响话题命名、模型加载、配置文件选择等
      
      使用方式:
      - C++中通过 ros::param::get("/robot_name", robot_name) 获取
      - Python中通过 rospy.get_param("/robot_name") 获取
      - 命令行通过 rosparam get /robot_name 查看
      
      参数传播:
      - 此参数设置后，所有相关节点都使用统一的机器人名称
      - 确保话题命名的一致性和系统的协调性
    -->
    <param name="robot_name" value="$(arg rname)"/>

    <!-- ==================== 可选节点启动 ==================== -->
    
    <!--
      unitree_servo节点启动 (当前已注释)
      
      包名: unitree_controller
      节点类型: unitree_servo (对应src/servo.cpp编译的可执行文件)
      节点名称: unitree_servo
      重启策略: respawn="true" (节点崩溃时自动重启)
      
      功能说明:
      - 这是机器人的主控制节点
      - 负责让机器人从平躺状态站立起来
      - 实现关节控制和状态监控
      - 连接Gazebo仿真与ROS控制系统
      
      注释原因:
      - 通常希望手动启动控制节点，而不是自动启动
      - 便于调试和测试，可以按需启动
      - 避免在系统启动时就开始控制机器人
      
      如果需要自动启动，可以取消注释:
      <node pkg="unitree_controller" type="unitree_servo" name="unitree_servo" respawn="true"/>
      
      手动启动方式:
      rosrun unitree_controller unitree_servo
      
      启动时机:
      1. 先启动Gazebo仿真环境
      2. 加载机器人模型和控制器
      3. 最后启动unitree_servo让机器人站立
    -->
    <!-- <node pkg="unitree_controller" type="unitree_servo" name="unitree_servo" respawn="true"/> -->

</launch>

<!--
  ==================== 使用示例和集成说明 ====================
  
  1. 被其他launch文件引用的典型方式:
  
        /**
         * 机器人坐标系模式主循环
         * 
         * 运动特性:
         * - 直线运动: 以恒定速度前进
         * - 高度变化: 持续上升
         * - 姿态保持: 不旋转，保持初始朝向
         * - 坐标系: 相对于机器人本体
         * 
         * 应用场景:
         * - 测试机器人本体坐标系下的运动控制
         * - 验证里程计和惯性导航的准确性
         * - 模拟机器人在倾斜面或运动平台上的行为
         * 
         * 注意事项:
         * - 机器人会持续上升，注意仿真环境的边界
         * - 速度值较小，适合精确的传感器测试
         * - 可以通过修改def_frame并重新编译来切换模式
         */
        while (ros::ok())
        {
            // 发布机器人速度命令到Gazebo
            move_publisher.publish(model_state_pub);
            
            // 等待下一个控制周期
            loop_rate.sleep();
        }
    }
    
    // ==================== 程序正常退出 ====================
    
    /**
     * 程序结束
     * 
     * 正常情况下，只有在收到SIGINT信号(Ctrl+C)或ros::shutdown()时才会到达这里
     * 程序退出时，机器人将保持最后的状态
     */
    return 0;
}

// ==================== 使用说明和扩展建议 ====================

/*
 * 使用方法:
 * 
 * 1. 启动Gazebo仿真环境:
 *    roslaunch unitree_gazebo normal.launch rname:=go1 wname:=earth
 * 
 * 2. 运行位置控制器:
 *    rosrun unitree_controller unitree_move_kinetic
 * 
 * 3. 观察机器人运动:
 *    - 世界坐标系模式: 机器人绕原点做圆周运动
 *    - 机器人坐标系模式: 机器人直线前进并上升
 * 
 * 模式切换:
 * 1. 修改 def_frame = coord::ROBOT
 * 2. 重新编译: catkin_make
 * 3. 运行程序观察不同的运动模式
 * 
 * 扩展建议:
 * 
 * 1. 添加键盘控制:
 *    - 实现交互式位置控制
 *    - 支持实时调整运动参数
 * 
 * 2. 添加轨迹文件读取:
 *    - 从文件加载预定义轨迹
 *    - 支持复杂的运动模式
 * 
 * 3. 添加传感器数据记录:
 *    - 记录运动过程中的传感器数据
 *    - 用于算法验证和数据集构建
 * 
 * 4. 添加运动参数配置:
 *    - 通过ROS参数动态配置速度、半径等
 *    - 无需重新编译即可调整运动模式
 * 
 * 代码示例 - 添加参数化配置:
 * 
 * double radius, period, linear_x, linear_z;
 * nh.param("circle_radius", radius, 1.5);
 * nh.param("circle_period", period, 5000.0);
 * nh.param("linear_speed_x", linear_x, 0.02);
 * nh.param("linear_speed_z", linear_z, 0.08);
 * 
 * 性能优化建议:
 * 
 * 1. 降低发布频率:
 *    - 对于轨迹跟踪，1000Hz可能过高
 *    - 可以降低到100Hz或更低，减少系统负载
 * 
 * 2. 添加平滑过渡:
 *    - 在运动开始和结束时添加加速度限制
 *    - 避免突然的速度变化
 * 
 * 安全注意事项:
 * 
 * 1. 监控机器人状态:
 *    - 确保机器人不会移动到危险位置
 *    - 设置位置和速度限制
 * 
 * 2. 紧急停止:
 *    - 实现Ctrl+C安全退出
 *    - 在异常情况下自动停止运动
 * 
 * 调试技巧:
 * 
 * 1. 使用rviz可视化:
 *    - 显示机器人轨迹和目标位置
 *    - 监控坐标变换关系
 * 
 * 2. 添加日志输出:
 *    - 记录关键的位置和速度信息
 *    - 便于问题诊断和性能分析
 */

<!--
  ==================== 使用示例和集成说明 ====================
  
  1. 被其他launch文件引用的典型方式:
  
  <include file="$(find unitree_controller)/launch/set_ctrl.launch">
      <arg name="rname" value="go1"/>
  </include>
  
  这样可以将机器人名称参数传递给unitree_controller包
  
  2. 在gazebo_move_base.launch中的实际使用:
  
  <include file="$(find unitree_controller)/launch/set_ctrl.launch">
      <arg name="rname" value="$(arg rname)"/>
  </include>
  
  这里$(arg rname)是从上层launch文件传递下来的参数
  
  3. 命令行启动时指定机器人类型:
  
  roslaunch unitree_gazebo normal.launch rname:=go1
  
  这个rname参数会层层传递，最终设置到/robot_name全局参数
  
  ==================== 参数传递链路 ====================
  
  命令行参数 -> normal.launch -> set_ctrl.launch -> /robot_name参数
  
  例如:
  1. 命令行: roslaunch unitree_gazebo normal.launch rname:=go1
  2. normal.launch接收rname参数并传递给set_ctrl.launch
  3. set_ctrl.launch将rname设置为全局参数/robot_name
  4. 所有程序通过ros::param::get("/robot_name")获取机器人类型
  
  ==================== 扩展配置建议 ====================
  
  1. 添加更多机器人参数:
  
  <arg name="robot_type" default="quadruped"/>
  <arg name="control_mode" default="position"/>
  <param name="robot_type" value="$(arg robot_type)"/>
  <param name="control_mode" value="$(arg control_mode)"/>
  
  2. 添加条件启动:
  
  <group if="$(arg auto_start_servo)">
      <node pkg="unitree_controller" type="unitree_servo" name="unitree_servo" respawn="true"/>
  </group>
  
  3. 添加命名空间支持:
  
  <group ns="$(arg robot_namespace)">
      <param name="robot_name" value="$(arg rname)"/>
  </group>
  
  ==================== 故障排除 ====================
  
  1. 机器人名称不匹配:
     检查: rosparam get /robot_name
     确保与launch文件中的rname参数一致
  
  2. 话题名称错误:
     检查: rostopic list | grep gazebo
     应该看到类似 /go1_gazebo/joint_states 的话题
  
  3. 参数传递失败:
     使用: rosparam list
     确认 /robot_name 参数已正确设置
-->

</launch>