/**********************************************************************
 Copyright (c) 2020-2023, Unitree Robotics.Co.Ltd. All rights reserved.
***********************************************************************/
#ifndef FEETENDCAL_H
#define FEETENDCAL_H

#include "control/CtrlComponents.h"
#include "message/LowlevelState.h"

/**
 * @brief 足端位置计算器类
 * 
 * 【文件作用】
 * 该文件定义了足端位置计算器(FeetEndCal)类，是四足机器人步态规划中的核心组件之一。
 * 主要功能是计算机器人在行走过程中，每条腿的足端应该落在哪个位置，以实现稳定的运动。
 * 
 * 【核心功能】
 * 1. 足端落脚点预测：根据机器人当前的运动状态和目标运动意图，计算下一步足端应该着地的位置
 * 2. 速度补偿：考虑机器人当前的线速度和角速度，对足端位置进行前瞻性补偿
 * 3. 相位自适应：根据步态相位动态调整足端位置，确保步态的连续性和稳定性
 * 4. 坐标变换：处理从机体坐标系到全局坐标系的位置转换
 * 
 * 【应用场景】
 * - 在小跑(Trot)步态中，预测对角腿的落脚点
 * - 在爬行(Crawl)步态中，计算单腿摆动的目标位置
 * - 在转向运动中，考虑角速度对足端位置的影响
 * - 在变速运动中，根据速度变化调整步长
 * 
 * 【算法原理】
 * 采用基于速度前馈的足端位置预测算法，结合比例控制器对速度误差进行补偿。
 * 考虑机器人的运动学约束和动力学特性，确保生成的足端位置可达且稳定。
 */
class FeetEndCal{
public:
    /**
     * @brief 构造函数
     * @param ctrlComp 控制组件指针，包含机器人所有控制相关的对象和数据
     * 
     * 初始化足端位置计算器，设置必要的控制参数和机器人模型引用。
     * 从控制组件中获取状态估计器、底层状态、机器人模型等关键对象。
     */
    FeetEndCal(CtrlComponents *ctrlComp);
    
    /**
     * @brief 析构函数
     * 
     * 清理资源，释放内存。由于该类主要使用引用和指针，
     * 通常不需要特殊的清理操作。
     */
    ~FeetEndCal();
    
    /**
     * @brief 计算指定腿的足端位置
     * @param legID 腿部编号 (0:前右腿FR, 1:前左腿FL, 2:后右腿RR, 3:后左腿RL)
     * @param vxyGoalGlobal 期望的全局坐标系下xy方向线速度 [m/s]
     *                      Vec2类型，[0]:x方向速度(前进), [1]:y方向速度(侧移)
     * @param dYawGoal 期望的偏航角速度(绕z轴旋转) [rad/s]
     *                 正值表示逆时针旋转，负值表示顺时针旋转
     * @param phase 当前腿的步态相位 [0.0~1.0]
     *              0.0表示摆动相开始，1.0表示摆动相结束即将触地
     * @return Vec3 计算得到的足端位置，全局坐标系 [m]
     *              [0]:x坐标(前后方向), [1]:y坐标(左右方向), [2]:z坐标(上下方向)
     * 
     * 【计算原理】
     * 该函数实现了基于速度前馈和比例反馈的足端位置预测算法：
     * 
     * 1. 线速度预测分量：
     *    nextStep_xy = v_current * (1-phase) * T_swing + v_current * T_stance/2
     *    - 第一项：剩余摆动时间内的位移
     *    - 第二项：下一个支撑相中期的位移（前瞻补偿）
     * 
     * 2. 速度误差补偿：
     *    nextStep_xy += k_xy * (v_current - v_goal)
     *    - 通过比例控制器减小速度跟踪误差
     * 
     * 3. 角速度预测分量：
     *    nextYaw = w_current * (1-phase) * T_swing + w_current * T_stance/2
     *    nextYaw += k_yaw * (w_goal - w_current)
     * 
     * 4. 足端几何位置修正：
     *    考虑腿部相对机体中心的几何关系，加入由于机体旋转引起的足端位置变化
     * 
     * 【参数调节指导】
     * - kx, ky: 线速度控制增益，典型值0.005，增大可提高速度跟踪精度但可能引起震荡
     * - kyaw: 角速度控制增益，典型值0.005，增大可提高转向响应但需注意稳定性
     * - 调节原则：仿真中先调试，然后在真实机器人上微调
     */
    Vec3 calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase);

private:
    // ==================== 核心对象引用 ====================
    
    /**
     * @brief 底层状态对象指针
     * 
     * 用于获取机器人的实时状态信息，包括：
     * - IMU数据：机体姿态角(roll, pitch, yaw)
     * - 陀螺仪数据：角速度(wx, wy, wz)
     * - 关节编码器数据：12个关节的位置、速度、力矩反馈
     * 
     * 该对象通过IOInterface从机器人硬件或仿真环境中实时更新
     */
    LowlevelState *_lowState;
    
    /**
     * @brief 状态估计器指针
     * 
     * 状态估计器融合多传感器数据，提供高精度的机器人状态估计：
     * - 机体位置：相对于世界坐标系的3D位置
     * - 机体速度：线速度和角速度的最优估计
     * - 足端位置：四条腿足端在世界坐标系中的位置
     * - 滤波处理：消除传感器噪声，提供平滑的状态信息
     * 
     * 相比直接使用传感器数据，状态估计器的输出更稳定、准确
     */
    Estimator *_est;
    
    /**
     * @brief 机器人模型指针
     * 
     * 包含机器人的运动学和动力学参数：
     * - 关节长度：大腿、小腿、足部的尺寸参数
     * - 关节限位：各关节的运动范围约束
     * - 质量参数：各链节的质量和惯性参数
     * - 运动学函数：正运动学、逆运动学求解
     * - 理想足端位置：机器人标准站立时的足端相对位置
     * 
     * 支持A1、Go1等不同型号的机器人，通过工厂模式创建
     */
    QuadrupedRobot *_robModel;

    // ==================== 计算中间变量 ====================
    
    /**
     * @brief 下一步预测位置
     * 
     * Vec3类型，存储计算得出的下一步足端目标位置：
     * [0]: x方向位置 (机体前进方向) [m]
     * [1]: y方向位置 (机体左右方向) [m]  
     * [2]: z方向位置 (机体上下方向) [m] - 通常设为0（地面高度）
     * 
     * 该变量是calFootPos函数的主要输出，经过速度预测、
     * 误差补偿、几何修正等多个步骤计算得出
     */
    Vec3 _nextStep;

    /**
     * @brief 最终足端位置
     * 
     * Vec3类型，存储经过完整计算流程后的最终足端目标位置：
     * [0]: x方向绝对位置 (全局坐标系) [m]
     * [1]: y方向绝对位置 (全局坐标系) [m]
     * [2]: z方向绝对位置 (全局坐标系) [m] - 通常为0（地面高度）
     * 
     * 计算流程：
     * 1. _nextStep: 计算相对于当前机体位置的足端偏移
     * 2. _footPos = 当前机体位置 + _nextStep: 转换为全局坐标系下的绝对位置
     * 3. _footPos(2) = 0.0: 强制z坐标为地面高度
     * 
     * 该变量是calFootPos函数的最终返回值，提供给上层的步态生成器
     * 作为足端轨迹规划的目标点使用
     */
    Vec3 _footPos;
    
    /**
     * @brief 机体全局线速度
     * 
     * Vec3类型，机体在全局坐标系下的线速度：
     * [0]: x方向速度 (向前为正) [m/s]
     * [1]: y方向速度 (向左为正) [m/s]
     * [2]: z方向速度 (向上为正) [m/s]
     * 
     * 该速度由状态估计器融合IMU、里程计等传感器数据得出，
     * 相比单一传感器数据更准确可靠
     */
    Vec3 _bodyVelGlobal;        // linear velocity
    
    /**
     * @brief 机体全局线加速度
     * 
     * Vec3类型，机体在全局坐标系下的线加速度：
     * [0]: x方向加速度 [m/s²]
     * [1]: y方向加速度 [m/s²]
     * [2]: z方向加速度 [m/s²]
     * 
     * 主要用于高级控制算法中的预测和补偿，
     * 当前版本的足端位置计算中可能未直接使用
     */
    Vec3 _bodyAccGlobal;        // linear accelerator
    
    /**
     * @brief 机体全局角速度
     * 
     * Vec3类型，机体在全局坐标系下的角速度：
     * [0]: 绕x轴旋转速度 (roll方向) [rad/s]
     * [1]: 绕y轴旋转速度 (pitch方向) [rad/s]
     * [2]: 绕z轴旋转速度 (yaw方向) [rad/s]
     * 
     * 用于计算机器人转向时足端位置的修正，
     * 确保转向过程中的步态稳定性
     */
    Vec3 _bodyWGlobal;          // angular velocity

    // ==================== 几何参数 ====================
    
    /**
     * @brief 足端相对机体中心的半径
     * 
     * Vec4类型，四条腿足端到机体几何中心的距离：
     * [0]: 前右腿足端半径 [m]
     * [1]: 前左腿足端半径 [m]
     * [2]: 后右腿足端半径 [m]
     * [3]: 后左腿足端半径 [m]
     * 
     * 该参数在构造函数中根据机器人理想足端位置计算得出，
     * 用于考虑机体旋转对足端位置的影响
     */
    Vec4 _feetRadius;
    
    /**
     * @brief 足端相对机体中心的初始角度
     * 
     * Vec4类型，四条腿足端相对机体中心的方位角：
     * [0]: 前右腿初始角度 [rad] (通常为负值，第四象限)
     * [1]: 前左腿初始角度 [rad] (通常为正值，第一象限)  
     * [2]: 后右腿初始角度 [rad] (通常为负值，第三象限)
     * [3]: 后左腿初始角度 [rad] (通常为正值，第二象限)
     * 
     * 与_feetRadius配合，完整描述足端的极坐标位置，
     * 用于计算机体yaw角变化对足端位置的影响
     */
    Vec4 _feetInitAngle;

    // ==================== 姿态角度变量 ====================
    
    /**
     * @brief 当前偏航角
     * 
     * float类型，机体当前的偏航角(yaw角) [rad]
     * 定义：机体x轴与世界坐标系x轴的夹角
     * 正值表示逆时针旋转，负值表示顺时针旋转
     * 
     * 该角度从底层状态或状态估计器中获取，
     * 用于坐标变换和足端位置计算
     */
    float _yaw;
    
    /**
     * @brief 当前偏航角速度
     * 
     * float类型，机体当前的偏航角速度 [rad/s]
     * 正值表示逆时针旋转，负值表示顺时针旋转
     * 
     * 用于预测下一步的姿态角度和足端位置补偿
     */
    float _dYaw;

    /**
     * @brief 预测的下一步偏航角
     * 
     * float类型，基于当前角速度和控制目标预测的下一步偏航角 [rad]
     * 
     * 计算公式：
     * _nextYaw = _dYaw * (1-phase) * T_swing + _dYaw * T_stance/2 + _kyaw * (dYawGoal - _dYaw)
     * 
     * 用于足端位置的几何修正，确保转向过程中步态的连续性
     */
    float _nextYaw;

    // ==================== 步态时间参数 ====================
    
    /**
     * @brief 支撑相时间
     * 
     * float类型，每个步态周期中腿部接触地面的时间 [s]
     * 
     * 该时间从波形生成器中获取，取决于步态类型：
     * - 小跑步态：通常约0.225s (周期0.45s × 支撑比0.5)
     * - 爬行步态：通常约0.825s (周期1.1s × 支撑比0.75)
     * 
     * 用于足端位置预测算法中的时间补偿计算
     */
    float _Tstance;
    
    /**
     * @brief 摆动相时间
     * 
     * float类型，每个步态周期中腿部悬空摆动的时间 [s]
     * 
     * 计算关系：_Tswing = 步态周期 - _Tstance
     * 
     * 该时间决定了足端从离地到着地的可用时间，
     * 影响足端轨迹的生成和位置预测的准确性
     */
    float _Tswing;

    // ==================== 控制器增益参数 ====================
    
    /**
     * @brief x方向速度控制增益
     * 
     * float类型，x方向(前进方向)速度误差的比例控制增益
     * 
     * 典型值：0.005
     * 作用：当实际x方向速度与期望值有偏差时，按此增益调整足端x方向位置
     * 调节指导：
     * - 增大kx：提高前进速度的跟踪精度，但可能引起前后方向震荡
     * - 减小kx：降低响应速度，但提高稳定性
     * 
     * 物理意义：速度误差1m/s时，足端位置修正0.005m
     */
    float _kx;
    
    /**
     * @brief y方向速度控制增益
     * 
     * float类型，y方向(侧向)速度误差的比例控制增益
     * 
     * 典型值：0.005
     * 作用：当实际y方向速度与期望值有偏差时，按此增益调整足端y方向位置
     * 调节指导：
     * - 增大ky：提高侧向速度的跟踪精度，但可能引起左右方向震荡
     * - 减小ky：降低侧向响应，适用于主要前进运动的场景
     * 
     * 物理意义：速度误差1m/s时，足端位置修正0.005m
     */
    float _ky;
    
    /**
     * @brief 偏航角速度控制增益
     * 
     * float类型，偏航角速度误差的比例控制增益
     * 
     * 典型值：0.005
     * 作用：当实际偏航角速度与期望值有偏差时，按此增益调整足端角度位置
     * 调节指导：
     * - 增大kyaw：提高转向响应速度，但需注意稳定性
     * - 减小kyaw：降低转向敏感度，适用于直行为主的应用
     * 
     * 物理意义：角速度误差1rad/s时，引起的足端角度修正为0.005rad
     * 
     * 注意：该增益的调节需要特别小心，因为它直接影响机器人的转向稳定性
     */
    float _kyaw;
};

#endif  // FEETENDCAL_H

/*
 * ==================== 总体设计思路 ====================
 * 
 * FeetEndCal类实现了一个预测性的足端位置规划器，其核心思想是：
 * "基于当前运动状态和目标运动意图，预测腿部摆动结束时应该着地的位置"
 * 
 * 【算法流程】
 * 1. 获取当前状态：机体速度、角速度、姿态角等
 * 2. 速度预测：根据剩余摆动时间预测机体将移动的距离
 * 3. 前瞻补偿：考虑下一个支撑相中期的机体位移
 * 4. 误差补偿：通过比例控制器减小速度跟踪误差
 * 5. 几何修正：考虑机体旋转对足端位置的影响
 * 6. 坐标变换：转换到全局坐标系输出
 * 
 * 【关键创新点】
 * - 相位自适应：根据当前相位动态调整预测权重
 * - 多重补偿：同时考虑速度误差和几何约束
 * - 全局一致：输出全局坐标系下的绝对位置
 * 
 * 【参数调节策略】
 * 1. 首先在仿真环境中调试控制增益
 * 2. 观察机器人运动的平滑性和稳定性
 * 3. 在真实机器人上进行微调验证
 * 4. 根据具体应用场景优化参数
 * 
 * 【使用注意事项】
 * - 该类需要配合GaitGenerator使用，后者生成具体的足端轨迹
 * - 输出的位置是目标落脚点，不是实时足端位置
 * - 控制增益的调节需要考虑机器人的动力学特性
 * - 在不同地形和速度下可能需要调整参数
 */