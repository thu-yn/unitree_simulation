---
description: Unitree四足机器人自主建图导航项目
globs: *.cpp , *.h, *.hpp, *.yaml, *.launch, *.md, *.py
---

# Unitree四足机器人自主建图导航项目规则

## 项目概述
本项目旨在基于Unitree机器人官方SDK，开发一套完整的四足机器人自主建图导航系统，实现机器人在未知或已知环境中的自主移动、环境感知、地图构建和路径规划功能。

## 技术栈
- **编程语言**：C++、Python
- **机器人平台**：Unitree四足机器人（Go1/A1/Aliengo等）
- **开发框架**：ROS/ROS2
- **建图技术**：激光SLAM、视觉SLAM或视觉惯性SLAM
- **导航算法**：A*、RRT、RRT*等

## 代码规范

### 通用规范
1. 所有代码必须遵循C++17或Python 3.8+标准
2. 代码缩进统一使用4个空格，不使用Tab
3. 每个文件末尾必须有一个空行

### 命名规范
1. 变量名：驼峰式 `robotPosition`
2. 函数名：帕斯卡式 `CalculateInverseKinematics`
3. 类名：帕斯卡式 `MotionController`
4. 常量：大写下划线 `MAX_VELOCITY`
5. 命名应当具有描述性，避免使用单字母变量（除非是临时循环变量）

### 文档规范
1. 所有公共函数和类必须有文档注释
2. 复杂算法必须有详细注释说明原理
3. 代码中的关键步骤需要添加单行注释
4. README文件必须包含项目概述、安装指南、使用方法和API文档

### 错误处理
1. 优先使用异常而非错误码
2. 错误信息必须具有描述性
3. 关键操作必须有错误检查和处理机制


## 功能模块要求

### 1. 控制模块
- 基于Unitree SDK中提供的High Level控制方法，即通过路径规划等算法发送cmd_vel消息给unitree的sdk，转换成sdk接受的消息类型后由sdk进行处理运动
- 提供高级运动接口（前进、转向、调整姿态等）
- 实现机器人状态监控和异常处理

### 2. 感知模块
- 支持多种传感器数据处理（激光雷达、相机、IMU等）
- 允许使用现有的激光里程计等功能包，绝对路径为：/home/moyuan/catkin_ws/src/gem-fast_lio/FAST_LIO
- 提供传感器数据预处理和滤波功能
- 支持传感器数据可视化

### 3. 建图模块
- 实现实时SLAM算法
- 支持2D/3D地图构建
- 提供地图更新和优化功能
- 实现地图存储和加载功能

### 4. 路径规划模块
- 实现全局路径规划算法
- 实现局部路径规划和避障
- 支持动态环境中的路径重规划
- 提供路径平滑和优化功能

### 5. 导航模块
- 集成定位、建图和路径规划功能
- 实现目标点导航
- 支持探索未知区域
- 提供导航状态监控和可视化

## 开发流程
1. **需求分析**：明确功能需求和技术规格
2. **系统设计**：设计系统架构和模块接口
3. **模块开发**：按照模块划分进行开发
4. **单元测试**：对各模块进行单元测试
5. **集成测试**：进行模块集成和系统测试
6. **仿真验证**：在仿真环境中验证功能
7. **实机测试**：在实际机器人上进行测试
8. **性能优化**：优化系统性能和资源占用
9. **文档完善**：完善代码注释和使用文档

## 测试规范
1. 每个功能模块必须有单元测试
2. 关键算法必须有性能测试
3. 系统集成必须有端到端测试
4. 测试覆盖率应达到80%以上
5. 所有测试必须可自动化执行

## 部署要求
1. 支持amd与arm双架构
2. 提供详细的环境配置和依赖安装指南
3. 支持一键启动所有功能模块

## 性能指标
1. 建图精度：定位误差<5cm
2. 导航效率：规划时间<100ms
3. 避障可靠性：碰撞率<1%
4. 系统稳定性：连续运行>4小时无崩溃
5. 资源占用：CPU使用率<70%，内存使用<4GB

## 安全规范
1. 机器人最大速度必须可配置且有上限
2. 必须实现紧急停止功能
3. 检测到潜在危险时必须自动减速或停止
4. 所有外部输入必须进行有效性验证

## 文档要求
1. 代码必须有详细注释
2. 提供系统架构文档
3. 提供API使用手册
4. 提供安装和配置指南
5. 提供常见问题解答
6. 提供演示视频和使用教程

## 版本控制
1. 使用Git进行版本控制
2. 遵循语义化版本规范
3. 主要功能开发使用特性分支
4. 所有合并请求必须经过代码审查
5. 发布版本必须有明确的更新日志
```
